FORMAT: 1A
HOST: http://localhost:5000

# snowy-api

Simple API for allowing accessing snowy data.

## Registration [/register]

### Register a new user [POST]

+ Request (application/json)

        {
            "email": "ordf@lithekod.se",
            "password": "simon123"  
        }

+ Response 201 (application/json)

    + Body
    
            {
                'email': 'ordf@lithekod.se', 
                'site_lang': 'en',
                'db_edition': 'Swedish-2016-16-16',
                'last_name': '', 
                'first_name': ''
            }
            
## Login [/login]

### Login a user [POST]

+ Request (application/json)
    
    + Headers
    
            Authorization: token

    + Body

            {
                "email": "ordf@lithekod.se",
                "password": "simon123"  
            }

+ Response 201 (application/json)

    + Body
    
            {
                'token': 'abcdefgh'
            }

## Log out [/logout]

### Logging a user out [POST]

+ Request (application/json)

    + Headers

            Authorization: token

+ Response 200 (application/json)
    
    + Body
            {
                "status": "ok"
            }

## Testing verification [/verify]

### Verify a login [GET]

+ Request (application/json)

    + Headers
    
            Authorization: token

+ Response 200 (application/json)

    + Body
            {
                "status": "ok"
            }

## Update user information [/user_info]

### Update info [PUT]

+ Request (application/json)

    + Headers

            Authorization: token

    + Body

            {
                "first_name": "Simon",
                "last_name": "Lindblad",
                "site_lang": "en",
                "db_edition": "Swedish-2016-16-16",
                "email": "test@test.test"
            }


+ Response 200 (application/json)
    
    + Body 
        
            {
                "status": "ok",
                "token": "token"
            }

### Get info [GET]

+ Request (application/json)

    + Headers

            Authorization: token

+ Response 200 (application/json)
    
    + Body 

            {
                "first_name": "Simon",
                "last_name": "Lindblad",
                "site_lang": "en",
                "db_edition": "Swedish-2016-16-16",
                "email": "test@test.com"
            }

## Update password [/password]

### Update password [PUT]

+ Request (application/json)

    + Headers

            Authorization: token

    + Body

            {
                "new_password": "123456789",
                "curr_password": "987654321",
                "invalidate_tokens": true
            }


+ Response 200 (application/json)
    
    + Body 
        
            {
                "status": "ok"
            }


## Favorite Terms [/favorite_term]

### Get all favorite terms [GET]

+ Request (application/json)

    + Headers

            Authorization: token

+ Response 200 (application/json)

    + Body

            [
                {
                    'term': 'Secondary caries', 
                    'id': 708575005, 
                    'date_added': '2016-04-17 17:53:44.908075+02:00'
                }
            ]

### Add a new favorite term [POST]

+ Request (application/json)

    + Headers

            Authorization: token

    + Body
            {
                "id": 123,
                "term": "this is the name",
                "date_added": "This is a date string"
            }

+ Response 200 (application/json)

    + Body
            
            {
                "status": "ok"
            }


### Delete a favorite term [DELETE]

+ Request (application/json)

    + Headers

            Authorization: token

    + Body
            {
                "id": 12345
            }

+ Response (application/json)

    + Body
            {
                "status": "ok"
            }

## Concept [/concept/{id}]

### Retrieving a concept [GET]

+ Response 200 (application/json)

    + Body

            {
                "id": "708575005",
                "full": "Secondary caries (morphologic abnormality)",
                "synonym": "Secondary caries",
                "type_id": "1234", 
                "type_name": "IS A",
                "definition_status": "primitive"
            }

## Children [/get_children/{id}]

### Retriving children [GET]

+ Response 200 (application/json)
    
    + Body
        
            [
                {
                    'term': 'Wound observation', 
                    'id': 225552003,
                    'numberofchildren': 26,
                    'definition_status': 'fully-defined'

                }, 
                {
                    'term': 'Absence of signs and symptoms of radiation injury (situation)', 
                    'id': 397606006,
                    'numberofchildren': 0,
                    'definition_status': 'primitive'

                }, 
                {
                    'term': 'Single liveborn born in hospital by cesarean section (situation)', 
                    'id': 442423001,
                    'numberofchildren': 0,
                    'definition_status': 'primitive'
                }
            ]

## Parents [/get_parents/{id}]

### Retriving parents [GET]

+ Response 200 (application/json)
    
    + Body
        
            [
                {
                    'synonym': 'Wound observation', 
                    'full': 'Wound finding (finding)',
                    'id': 225552003,
                    'type_id': 11668003,
                    'type_name': 'IS A',
                    'definition_status': 'fully-defined'

                }, 
                {
                    'synonym': 'Absence of signs and symptoms of radiation injury',
                    'full': 'Absence of signs and symptoms of radiation injury (situation)', 
                    'id': 397606006,
                    'type_id': 11668003,
                    'type_name': 'IS A',
                    'definition_status': 'primitive'
                }, 
                {
                    'synonym': 'Single liveborn born in hospital by cesarean section',
                    'full': 'Single liveborn born in hospital by cesarean section (situation)', 
                    'id': 442423001,
                    'type_id': 11668003,
                    'type_name': 'IS A',
                    'definition_status': 'primitive'
                }
            ]

## Names [/get_names/{id}]

+ Response 200 (application/json)

    + Body

        [
            {
                'name': 'Primary malignant neoplasm of lung (disorder)',
                'type': 'full',
                'acceptabillity': 'preferred'
            },
            {
                'name': 'Primary malignant neoplasm of lung',
                'type': 'synonym',
                'acceptabillity': 'preferred'
            },
            {
                'name': 'Lung cancer',
                'type': 'synonym',
                'acceptabillity': 'acceptable'
            }
        ]

               

## Relationships [/get_relations/{id}]

### Retriving relationships [GET]

+ Response 200 (application/json)
    
    + Body
        
            [
                {
                    'term': 'Wound observation', 
                    'id': 225552003,
                    'type_id': 11668003,
                    'type_name': 'IS A'
                }, 
                {
                    'term': 'Absence of signs and symptoms of radiation injury (situation)', 
                    'id': 397606006,
                    'type_id': 116676008,
                    'type_name': 'ASSOCIATED MORPHOLOGY'
                }, 
                {
                    'term': 'Single liveborn born in hospital by cesarean section (situation)', 
                    'id': 442423001,
                    'type_id': 41216001,
                    'type_name': 'FINDING SITE'
                }
            ]

## Search [/search/<search_term>]

### Searching [GET]

+ Response 200 (application/json)

    + Body

            [
                {
                    '_score': 1.2582654, 
                    '_type': 'concept', 
                    '_source': 
                        {
                            'concept_id': 160284006, 
                            'term': 'FH: Cancer'
                        }, 
                    '_index': 'desc', 
                    '_id': '119509'
                }, 
                {
                    '_score': 1.2582654, 
                    '_type': 'concept', 
                    '_source': 
                        {
                            'concept_id': 160284006, 
                            'term': 'FH: cancer'
                        }, 
                    '_index': 'desc', '_id': '119514'
                }
            ]

## Diagrams [/diagrams]

### Get all diagrams [GET]

+ Request (application/json)

    + Headers

            Authorization: token


+ Response 200 (application/json)

    + Body

            [
                {
                    'id': 1, 
                    'name': 'Simons diagram',
                    'created': '2016-04-17 18:44:09.154725+02:00', 
                    'modified': '2016-04-17 18:44:09.154725+02:00', 
                    'data': 'This is a JSON formatted diagram'
                }
            ]

## Diagram [/diagram/{id}]

### Get a diagram [GET]

+ Request (application/json)

    + Headers

            Authorization: token


+ Response 200 (application/json)

    + Body

            {
                'id': 1,
                'name': 'Simons diagram',
                'created': '2016-04-17 18:44:09.154725+02:00', 
                'modified': '2016-04-17 18:44:09.154725+02:00', 
                'data': 'This is a JSON formatted diagram'
            }


### Add a new diagram [POST]

+ Request (application/json)

    + Headers

            Authorization: token

    + Body

            {
                "data": "This is a JSON formatted diagram",
                "name": "This is the name of the diagram",
                "created": "This is a date string"
            }

+ Response 200 (application/json)

    + Body

            {
                'id': 1
            }

### Updating an existing diagram [PUT]

+ Request (application/json)

    + Headers

            Authorization: token

    + Body

            {
                "data": "This is a JSON formatted diagram",
                "id": 1,
                "name": "New name",
                "modified": "This is a date string"
            }

+ Response 200 (application/json)

    + Body

            {
                "status": "ok"
            }
            
### Delete a diagram [DELETE]

+ Request (application/json)

    + Headers

            Authorization: token

+ Response (application/json)

    + Body
            {
                "status": "ok"
            }
